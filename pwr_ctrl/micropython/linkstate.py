from machine import Pin, Signalimport pins_cfgimport timeimport _threadlinks = {"optic 1" : Signal(Pin(pins_cfg.optic1Pin, Pin.IN, Pin.PULL_UP), invert=True),        "optic 2" : Signal(Pin(pins_cfg.optic2Pin, Pin.IN, Pin.PULL_UP), invert=True),        "optic 3" : Signal(Pin(pins_cfg.optic3Pin, Pin.IN, Pin.PULL_UP), invert=True),        "copper 1" : Signal(Pin(pins_cfg.copper1Pin, Pin.IN, Pin.PULL_UP), invert=True),        "copper 2" : Signal(Pin(pins_cfg.copper2Pin, Pin.IN, Pin.PULL_UP), invert=True),        "copper 3" : Signal(Pin(pins_cfg.copper3Pin, Pin.IN, Pin.PULL_UP), invert=True),        "power" : Signal(Pin(pins_cfg.pwrledPin, Pin.IN, Pin.PULL_UP), invert=True),    }uplinks = ["optic 1", "copper 1"]downlinks = ["optic 2", "optic 3", "copper 2", "copper 3"]link_read_delay = 0.1 # in seclink_story_length = 10link_story = {key:[] for key in links.keys()}link_states = {}def update_link_states():    global links, link_story_length, link_story    for linkname in links.keys():        linksig = links[linkname]        link_story[linkname].append(linksig.value())        if len(link_story[linkname]) > link_story_length:            link_story[linkname].pop(0)            def make_solution():    global links, link_story_length, link_story, link_states    for linkname in links.keys():        ones = sum(link_story[linkname])        if ones == 0:            link_states[linkname] = "off"        elif ones < len(link_story[linkname]):            link_states[linkname] = "flashing"        else:            link_states[linkname] = "on"    return link_states    def link_mon_thread():    global link_read_delay    while True:        update_link_states()        time.sleep(link_read_delay)def init():    _thread.start_new_thread(link_mon_thread, ())    