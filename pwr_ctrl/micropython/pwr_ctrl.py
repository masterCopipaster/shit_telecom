from machine import Pin, Signal, deepsleepimport timeimport pins_cfgimport linkstateimport _threadimport esp32poweroff_timeout = 10recheck_time = 10start_timeout = 5state_check_peroid = 1def downlink_on():    Pin(pins_cfg.downlinkpwrPin, Pin.OUT, hold=True, value=1)    def downlink_off():    Pin(pins_cfg.downlinkpwrPin, Pin.OUT, hold=True, value=0)def uplink_on():    Pin(pins_cfg.uplinkpwrPin, Pin.OUT, hold=True, value=0)    def uplink_off():    Pin(pins_cfg.uplinkpwrPin, Pin.OUT, hold=True, value=1)    def go_down():    downlink_off()    uplink_off()    print("entering sleep")    esp32.gpio_deep_sleep_hold(True)    deepsleep(recheck_time * 1000)    #time.sleep(recheck_time)def check_downlinks():    linkstate.make_solution()    for name in linkstate.downlinks:        state = linkstate.link_states[name]        if (state == "on" or state == "flashing"):            return True    return False    def check_uplinks():    linkstate.make_solution()    for name in linkstate.uplinks:        state = linkstate.link_states[name]        if (state == "on" or state == "flashing"):            return True    return Falsedef pwr_ctrl_cycle():    global poweroff_timeout, recheck_time, start_timeout, state_check_peroid        while True:        print("checking links")        downlink_on()        time.sleep(start_timeout)        if not check_downlinks():            print("no activity going down")            go_down()            continue                print("link detected powering uplink")        uplink_on()        timeout_time = time.time()                while time.time() - timeout_time < poweroff_timeout:            if check_downlinks():                timeout_time = time.time()            time.sleep(state_check_peroid)        print("no activity timeout, going down")        go_down()    def init():    _thread.start_new_thread(pwr_ctrl_cycle, ())                